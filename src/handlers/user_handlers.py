import logging
from aiogram import types, F
from aiogram.filters import Command
from src.database import db

logger = logging.getLogger(__name__)

async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    
    db.register_user(user_id, username, first_name)
    
    if not db.has_user_checked_channel(user_id):
        subscription_text = f"""
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {first_name}!

üì¢ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:

{db.CHANNEL_USERNAME}

–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è"
        """
        await message.answer(subscription_text, reply_markup=db.subscription_check_keyboard(), parse_mode='HTML')
        return
    
    await show_main_menu(message, first_name)

async def show_main_menu(message: types.Message, first_name: str = None):
    if first_name is None:
        first_name = message.from_user.first_name
    
    welcome_text = f"""
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {first_name}!

üöÄ Bunker VPN - –Ω–∞–¥–µ–∂–Ω—ã–π –∏ –±—ã—Å—Ç—Ä—ã–π VPN —Å–µ—Ä–≤–∏—Å

üì≤ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
‚Ä¢ üåê –î–æ—Å—Ç—É–ø –∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–∞–π—Ç–∞–º
‚Ä¢ üöÄ –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
‚Ä¢ üì± –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
    """
    await message.answer(welcome_text, reply_markup=db.main_menu(), parse_mode='HTML')

async def cmd_help(message: types.Message):
    if not db.has_user_checked_channel(message.from_user.id):
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", reply_markup=db.subscription_check_keyboard())
        return
    
    help_text = """
üõ†Ô∏è –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é Bunker VPN

üì± –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:
1. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –≤ –º–µ–Ω—é "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
2. –°–∫–∞—á–∞–π—Ç–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
3. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª

üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:
1. –°–∫–∞—á–∞–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥ –≤ –º–µ–Ω—é "–°–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥"
2. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
3. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É
    """
    await message.answer(help_text, reply_markup=db.help_menu(), parse_mode='HTML')

async def check_subscription(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    
    try:
        from aiogram import Bot
        import os
        from dotenv import load_dotenv
        
        load_dotenv()
        bot = Bot(token=os.getenv('BOT_TOKEN'))
        
        chat_member = await bot.get_chat_member(chat_id=db.CHANNEL_USERNAME, user_id=user_id)
        is_subscribed = chat_member.status in ['member', 'administrator', 'creator']
        
        if is_subscribed:
            db.mark_channel_checked(user_id)
            await callback.message.edit_text("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.", parse_mode='HTML')
            await show_main_menu(callback.message, callback.from_user.first_name)
        else:
            await callback.message.edit_text("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", reply_markup=db.subscription_check_keyboard())
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏!")

async def back_to_main(callback: types.CallbackQuery):
    await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=db.main_menu())

async def back_to_plans(callback: types.CallbackQuery):
    await show_plans(callback)

async def show_plans(callback: types.CallbackQuery):
    if not db.has_user_checked_channel(callback.from_user.id):
        await callback.message.edit_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", reply_markup=db.subscription_check_keyboard())
        return
    
    plans_text = """
üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:

üî• 1 –º–µ—Å—è—Ü - 299‚ÇΩ
‚Ä¢ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω—ã

üí• 3 –º–µ—Å—è—Ü–∞ - 799‚ÇΩ
‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è 98‚ÇΩ

üöÄ 6 –º–µ—Å—è—Ü–µ–≤ - 1399‚ÇΩ  
‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è 395‚ÇΩ

‚ö° 12 –º–µ—Å—è—Ü–µ–≤ - 2399‚ÇΩ
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è
    """
    
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text="üî• 1 –º–µ—Å—è—Ü - 299‚ÇΩ", callback_data="plan_1month"))
    keyboard.add(InlineKeyboardButton(text="üí• 3 –º–µ—Å—è—Ü–∞ - 799‚ÇΩ", callback_data="plan_3months"))
    keyboard.add(InlineKeyboardButton(text="üöÄ 6 –º–µ—Å—è—Ü–µ–≤ - 1399‚ÇΩ", callback_data="plan_6months"))
    keyboard.add(InlineKeyboardButton(text="‚ö° 12 –º–µ—Å—è—Ü–µ–≤ - 2399‚ÇΩ", callback_data="plan_12months"))
    keyboard.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main"))
    keyboard.adjust(1)
    
    await callback.message.edit_text(plans_text, reply_markup=keyboard.as_markup(), parse_mode='HTML')

async def show_apps(callback: types.CallbackQuery):
    if not db.has_user_checked_channel(callback.from_user.id):
        await callback.message.edit_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", reply_markup=db.subscription_check_keyboard())
        return
    
    apps_text = "üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º:"
    
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text="üì± Android", callback_data="app_android"))
    keyboard.add(InlineKeyboardButton(text="üçé iOS", callback_data="app_ios"))
    keyboard.add(InlineKeyboardButton(text="üíª Windows", callback_data="app_windows"))
    keyboard.add(InlineKeyboardButton(text="üñ•Ô∏è macOS", callback_data="app_macos"))
    keyboard.add(InlineKeyboardButton(text="üêß Linux", callback_data="app_linux"))
    keyboard.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main"))
    keyboard.adjust(2)
    
    await callback.message.edit_text(apps_text, reply_markup=keyboard.as_markup(), parse_mode='HTML')

async def show_help(callback: types.CallbackQuery):
    if not db.has_user_checked_channel(callback.from_user.id):
        await callback.message.edit_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", reply_markup=db.subscription_check_keyboard())
        return
    
    help_text = "üõ†Ô∏è –ü–æ–º–æ—â—å - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
    await callback.message.edit_text(help_text, reply_markup=db.help_menu(), parse_mode='HTML')

async def show_support(callback: types.CallbackQuery):
    if not db.has_user_checked_channel(callback.from_user.id):
        await callback.message.edit_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", reply_markup=db.subscription_check_keyboard())
        return
    
    support_text = """
üìû –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞

üë®‚Äçüíª –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞: @bunker_support
üìß Email: support@bunker-vpn.ru

‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ
    """
    await callback.message.edit_text(support_text, parse_mode='HTML')

async def download_app(callback: types.CallbackQuery):
    if not db.has_user_checked_channel(callback.from_user.id):
        await callback.message.edit_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", reply_markup=db.subscription_check_keyboard())
        return
    
    app_data = callback.data.split("_")[1]
    
    apps = {
        "android": {"name": "Android", "url": "https://play.google.com/store/apps/details?id=com.bunkervpn"},
        "ios": {"name": "iOS", "url": "https://apps.apple.com/app/bunker-vpn/id123456789"},
        "windows": {"name": "Windows", "url": "https://bunker-vpn.ru/download/windows"},
        "macos": {"name": "macOS", "url": "https://bunker-vpn.ru/download/macos"},
        "linux": {"name": "Linux", "url": "https://bunker-vpn.ru/download/linux"}
    }
    
    app = apps.get(app_data)
    if app:
        app_text = f"üì± –°–∫–∞—á–∞—Ç—å –¥–ª—è {app['name']}:\n{app['url']}"
        await callback.message.edit_text(app_text, parse_mode='HTML')